options{  JDK_VERSION = "1.7";  UNICODE_INPUT = true;  STATIC = false;}PARSER_BEGIN(ExampleCompiler)package com.competentum.demo.javacc.compiler;public class ExampleCompiler{}PARSER_END(ExampleCompiler)SKIP :{  " "| "\t"| "\n"| "\r"| "\f"}/*Keywords*/TOKEN :{  < INT : "int" >| < BOOL : "boolean" >| < TRUE : "true" >| < FALSE : "false" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < PRINT : "print" >}/*Operations*/TOKEN :{  < ASSIGN : "=" >| < OR : "|" >| < AND : "&" >| < XOR : "^" >| < EQ : "==" >| < NEQ : "!=" >| < GT : ">" >| < LT : "<" >| < GE : ">=" >| < LE : "<=" >| < PLUS : "+" >| < MINUS : "-" >| < MUL : "*" >| < DIV : "/" >| < MOD : "%" >| < NOT : "!" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_BRACER : "{" >| < RIGHT_BRACER : "}" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < INTEGER_LITERAL : (< DIGIT >)+ >| < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < STRING_LITERAL :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    | "\\" [ "n", "t", "r", "\\", "\"" ]    )*    "\"" >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}public void compile() :{}{  (    varDeclaration() < SEMICOLON >  | statement()  )*  < EOF >}protected void varDeclaration() :{}{  (    < BOOL >  | < INT >  )  < IDENTIFIER >}protected void expression() :{}{  LOOKAHEAD(2)  assignment()| orExpression()}protected void assignment() :{}{  id() < ASSIGN > expression()}protected void orExpression() :{}{  andExpression()  (    < OR > andExpression()  )*}protected void andExpression() :{}{  xorExpression()  (    < AND > xorExpression()  )*}protected void xorExpression() :{}{  relationalExpression()  (    < XOR > relationalExpression()  )*}protected void relationalExpression() :{}{  additiveExpression()  (    < EQ > additiveExpression()  | < NEQ > additiveExpression()  | < LT > additiveExpression()  | < GT > additiveExpression()  | < LE > additiveExpression()  | < GE > additiveExpression()  )*}protected void additiveExpression() :{}{  multiplicativeExpression()  (    < PLUS > multiplicativeExpression()  | < MINUS > multiplicativeExpression()  )*}protected void multiplicativeExpression() :{}{  unaryExpression()  (    < MUL > unaryExpression()  | < DIV > unaryExpression()  | < MOD > unaryExpression()  )*}protected void unaryExpression() :{}{  < NOT > unaryExpression()| primaryExpression()}protected void primaryExpression() :{}{  literal()| id()| < LEFT_PAREN > expression() < RIGHT_PAREN >}protected void id() :{}{  < IDENTIFIER >}protected void literal() :{}{  intLiteral()| booleanLiteral()| stringLiteral()}protected void stringLiteral() :{}{  < STRING_LITERAL >}protected void intLiteral() :{}{  < INTEGER_LITERAL >}protected void booleanLiteral() :{}{  < TRUE >| < FALSE >}protected void statement() :{}{  < SEMICOLON >| block()| statementExpression()| ifStatement()| whileStatement()| writeStatement()}protected void block() :{}{  < LEFT_BRACER >  (    statement()  )*  < RIGHT_BRACER >}protected void statementExpression() :{}{  assignment() < SEMICOLON >}protected void ifStatement() :{}{  < IF > < LEFT_PAREN > expression() < RIGHT_PAREN > statement()  [    LOOKAHEAD(1)    < ELSE > statement()  ]}protected void whileStatement() :{}{  < WHILE > < LEFT_PAREN > expression() < RIGHT_PAREN > statement()}protected void writeStatement() :{}{  < PRINT >  (    id()  | literal()  )  < SEMICOLON >}
