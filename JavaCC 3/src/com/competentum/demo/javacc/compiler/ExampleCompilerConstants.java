/* Generated By:JavaCC: Do not edit this line. ExampleCompilerConstants.java */
package com.competentum.demo.javacc.compiler;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExampleCompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INT = 6;
  /** RegularExpression Id. */
  int BOOL = 7;
  /** RegularExpression Id. */
  int TRUE = 8;
  /** RegularExpression Id. */
  int FALSE = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int PRINT = 13;
  /** RegularExpression Id. */
  int ASSIGN = 14;
  /** RegularExpression Id. */
  int OR = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int XOR = 17;
  /** RegularExpression Id. */
  int EQ = 18;
  /** RegularExpression Id. */
  int NEQ = 19;
  /** RegularExpression Id. */
  int GT = 20;
  /** RegularExpression Id. */
  int LT = 21;
  /** RegularExpression Id. */
  int GE = 22;
  /** RegularExpression Id. */
  int LE = 23;
  /** RegularExpression Id. */
  int PLUS = 24;
  /** RegularExpression Id. */
  int MINUS = 25;
  /** RegularExpression Id. */
  int MUL = 26;
  /** RegularExpression Id. */
  int DIV = 27;
  /** RegularExpression Id. */
  int MOD = 28;
  /** RegularExpression Id. */
  int NOT = 29;
  /** RegularExpression Id. */
  int SEMICOLON = 30;
  /** RegularExpression Id. */
  int LEFT_BRACER = 31;
  /** RegularExpression Id. */
  int RIGHT_BRACER = 32;
  /** RegularExpression Id. */
  int LEFT_PAREN = 33;
  /** RegularExpression Id. */
  int RIGHT_PAREN = 34;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 35;
  /** RegularExpression Id. */
  int IDENTIFIER = 36;
  /** RegularExpression Id. */
  int STRING_LITERAL = 37;
  /** RegularExpression Id. */
  int LETTER = 38;
  /** RegularExpression Id. */
  int DIGIT = 39;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"int\"",
    "\"boolean\"",
    "\"true\"",
    "\"false\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"print\"",
    "\"=\"",
    "\"|\"",
    "\"&\"",
    "\"^\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"!\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "<INTEGER_LITERAL>",
    "<IDENTIFIER>",
    "<STRING_LITERAL>",
    "<LETTER>",
    "<DIGIT>",
  };

}
