options{  JDK_VERSION = "1.7";  UNICODE_INPUT = true;  STATIC = false;  DEBUG_PARSER = true;}PARSER_BEGIN(Arithmetic)package com.competentum.demo.javacc.arithmetic;public class Arithmetic{}PARSER_END(Arithmetic)SKIP :{  " "| "\r"| "\t"}TOKEN :{  < NUMBER :    (      (< DIGIT >)+      (        "." (< DIGIT >)*      )?    | "." (< DIGIT >)+    )    (      [ "e", "E" ] ([ "+", "-" ])? (< DIGIT >)+    )? >| < #DIGIT : [ "0"-"9" ] >| < PLUS : "+" >| < MINUS : "-" >| < MUL : "*" >| < DIV : "/" >| < L_PAREN : "(" >| < R_PAREN : ")" >}public double parse() :{  double number;}{  number = additiveExpression()  {    return number;  }}protected double additiveExpression() :{  double result;  double operand;}{  result = multiplicativeExpression()  (    < PLUS > operand = multiplicativeExpression()    {      result += operand;    }  | < MINUS > operand = multiplicativeExpression()    {      result -= operand;    }  )*  {    return result;  }}protected double multiplicativeExpression() :{  double result;  double operand;}{  result = unaryExpression()  (    < MUL > operand = unaryExpression()    {      result *= operand;    }  | < DIV > operand = unaryExpression()    {      result /= operand;    }  )*  {    return result;  }}protected double unaryExpression() :{  double number;}{  < MINUS > number = unaryExpression()  {    return - number;  }| < PLUS > number = unaryExpression()  {    return number;  }| number = element()  {    return number;  }}protected double element() :{  Token _token;  double number;}{  _token = < NUMBER >  {    return Double.parseDouble(_token.image);  }|  (    < L_PAREN > number = additiveExpression() < R_PAREN >    {      return number;    }  )}