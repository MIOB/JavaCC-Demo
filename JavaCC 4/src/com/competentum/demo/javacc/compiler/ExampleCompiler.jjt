options{  JDK_VERSION = "1.7";  UNICODE_INPUT = true;  STATIC = false;  MULTI = true;  BUILD_NODE_FILES = false;}PARSER_BEGIN(ExampleCompiler)package com.competentum.demo.javacc.compiler;public class ExampleCompiler{}PARSER_END(ExampleCompiler)SKIP :{  " "| "\t"| "\n"| "\r"| "\f"}/*Keywords*/TOKEN :{  < INT : "int" >| < STRING : "string" >| < BOOL : "boolean" >| < TRUE : "true" >| < FALSE : "false" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < PRINT : "print" >}/*Operations*/TOKEN :{  < ASSIGN : "=" >| < OR : "|" >| < AND : "&" >| < XOR : "^" >| < EQ : "==" >| < NEQ : "!=" >| < GT : ">" >| < LT : "<" >| < GE : ">=" >| < LE : "<=" >| < PLUS : "+" >| < MINUS : "-" >| < MUL : "*" >| < DIV : "/" >| < MOD : "%" >| < NOT : "!" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_BRACER : "{" >| < RIGHT_BRACER : "}" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < INTEGER_LITERAL : (< DIGIT >)+ >| < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < STRING_LITERAL :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    | "\\" [ "n", "t", "r", "\\", "\"" ]    )*    "\"" >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}public ASTCompilationUnit compile() #CompilationUnit :{}{  (    varDeclaration() < SEMICOLON >  | statement()  )*  < EOF >  {    return jjtThis;  }}protected void varDeclaration() #VarDecalare :{  Token _token;}{  (    _token = < BOOL >  | _token = < INT >  | _token = < STRING >  )  {    jjtThis.setType(Type.getType(_token.image));  }  id()}protected void expression() #void :{}{  LOOKAHEAD(2)  assignment()| orExpression()}protected void assignment() #Assignment :{}{  id() < ASSIGN > expression()}protected void orExpression() #void :{}{  andExpression()  (    < OR > andExpression() #OrNode(2))*}protected void andExpression() #void :{}{  xorExpression()  (    < AND > xorExpression() #AndNode(2))*}protected void xorExpression() #void :{}{  relationalExpression()  (    < XOR > relationalExpression() #XorNode(2))*}protected void relationalExpression() #void :{}{  additiveExpression()  (    < EQ > additiveExpression() #EQNode(2)| < NEQ > additiveExpression() #NEQNode(2)| < LT > additiveExpression() #LTNode(2)| < GT > additiveExpression() #GTNode(2)| < LE > additiveExpression() #LENode(2)| < GE > additiveExpression() #GENode(2))*}protected void additiveExpression() #void :{}{  multiplicativeExpression()  (    < PLUS > multiplicativeExpression() #AddNode(2)| < MINUS > multiplicativeExpression() #MinusNode(2))*}protected void multiplicativeExpression() #void :{}{  unaryExpression()  (    < MUL > unaryExpression() #MulNode(2)| < DIV > unaryExpression() #DivNode(2)| < MOD > unaryExpression() #ModNode(2))*}protected void unaryExpression() #void :{}{  < NOT > unaryExpression() #NotNode| < MINUS > unaryExpression() #UnaryMinusNode| primaryExpression()}protected void primaryExpression() #void :{}{  literal()| id()| < LEFT_PAREN > expression() < RIGHT_PAREN >}protected void id() #Identifier :{  Token _token;}{  _token = < IDENTIFIER >  {    jjtThis.setName(_token.image);  }}protected void literal() #void :{}{  intLiteral()| booleanLiteral()| stringLiteral()}protected void stringLiteral() #StringLiteral :{  Token _token;}{  _token = < STRING_LITERAL >  {    jjtThis.setValue(_token.image);  }}protected void intLiteral() #IntLiteral :{  Token _token;}{  _token = < INTEGER_LITERAL >  {    jjtThis.setValue(Integer.parseInt(_token.image));  }}protected void booleanLiteral() #void :{}{  < TRUE > #True| < FALSE > #False}protected void statement() #void :{}{  < SEMICOLON >| block()| statementExpression()| ifStatement()| whileStatement()| writeStatement()}protected void block() #Block :{}{  < LEFT_BRACER >  (    statement()  )*  < RIGHT_BRACER >}protected void statementExpression() #void :{}{  assignment() < SEMICOLON >}protected void ifStatement() #If :{}{  < IF > < LEFT_PAREN > expression() < RIGHT_PAREN > statement()  [    LOOKAHEAD(1)    < ELSE > statement()  ]}protected void whileStatement() #While:{}{  < WHILE > < LEFT_PAREN > expression() < RIGHT_PAREN > statement()}protected void writeStatement() #Print:{}{  < PRINT >  (    orExpression()  )  < SEMICOLON >}
