package com.competentum.demo.javacc.compiler;
import java.util.Map;

/* Generated By:JJTree: Do not edit this line. ASTEQNode.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTEQNode extends SimpleNode {
  public ASTEQNode(int id) {
    super(id);
  }

  public ASTEQNode(ExampleCompiler p, int id) {
    super(p, id);
  }

	@Override
	public Value eval(Map<String, Value> symbolTable)throws InterpreterException {
		if(jjtGetNumChildren() < 1)
			throw new InterpreterException();
		Value value = getChild(0).eval(symbolTable);
		for (int i = 1; i < jjtGetNumChildren(); i++)
			value = ne(value, getChild(i).eval(symbolTable));

		return value;
	}
	
	private Value ne(Value a, Value b) throws InterpreterException {
		if(a == null && b != null || a != null && b == null)
			return new Value(Type.BOOL, false);
		if(a == null && b == null)
			return new Value(Type.BOOL, true);
		if(a.getType() != b.getType())
			return new Value(Type.BOOL, false);
		if(a.getValue() == null)
			return new Value(Type.BOOL, b.getValue() == null);
		return new Value(Type.BOOL, a.getValue().equals(b.getValue()));
		
	}

}
/* JavaCC - OriginalChecksum=5f40e9e75c631c6db790b6e4ae115556 (do not edit this line) */
