/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ExampleCompiler.jj */
/*@egen*/options{  JDK_VERSION = "1.7";  UNICODE_INPUT = true;  STATIC = false;                                          }PARSER_BEGIN(ExampleCompiler)package com.competentum.demo.javacc.compiler;public class ExampleCompiler/*@bgen(jjtree)*/implements ExampleCompilerTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTExampleCompilerState jjtree = new JJTExampleCompilerState();

/*@egen*/}PARSER_END(ExampleCompiler)SKIP :{  " "| "\t"| "\n"| "\r"| "\f"}/*Keywords*/TOKEN :{  < INT : "int" >| < STRING : "string" >| < BOOL : "boolean" >| < TRUE : "true" >| < FALSE : "false" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < PRINT : "print" >}/*Operations*/TOKEN :{  < ASSIGN : "=" >| < OR : "|" >| < AND : "&" >| < XOR : "^" >| < EQ : "==" >| < NEQ : "!=" >| < GT : ">" >| < LT : "<" >| < GE : ">=" >| < LE : "<=" >| < PLUS : "+" >| < MINUS : "-" >| < MUL : "*" >| < DIV : "/" >| < MOD : "%" >| < NOT : "!" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_BRACER : "{" >| < RIGHT_BRACER : "}" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < INTEGER_LITERAL : (< DIGIT >)+ >| < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < STRING_LITERAL :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    | "\\" [ "n", "t", "r", "\\", "\"" ]    )*    "\"" >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}public ASTCompilationUnit compile()                  :{/*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CompilationUnit */
  try {
/*@egen*/  (    varDeclaration() < SEMICOLON >  | statement()  )*  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}protected void varDeclaration()              :{/*@bgen(jjtree) VarDecalare */
  ASTVarDecalare jjtn000 = new ASTVarDecalare(JJTVARDECALARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token _token;}{/*@bgen(jjtree) VarDecalare */
  try {
/*@egen*/  (    _token = < BOOL >  | _token = < INT >  | _token = < STRING >  )  {    jjtn000.setType(Type.getType(_token.image));  }  id()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}protected void expression()       :{}{  LOOKAHEAD(2)  assignment()| orExpression()}protected void assignment()             :{/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Assignment */
  try {
/*@egen*/  id() < ASSIGN > expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}protected void orExpression()       :{}{  andExpression()  (    < OR >/*@bgen(jjtree) #OrNode( 2) */
           {
             ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ andExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/           )*}protected void andExpression()       :{}{  xorExpression()  (    < AND >/*@bgen(jjtree) #AndNode( 2) */
            {
              ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ xorExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/            )*}protected void xorExpression()       :{}{  relationalExpression()  (    < XOR >/*@bgen(jjtree) #XorNode( 2) */
            {
              ASTXorNode jjtn001 = new ASTXorNode(JJTXORNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ relationalExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/            )*}protected void relationalExpression()       :{}{  additiveExpression()  (    < EQ >/*@bgen(jjtree) #EQNode( 2) */
           {
             ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ additiveExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/           | < NEQ >/*@bgen(jjtree) #NEQNode( 2) */
          {
            ASTNEQNode jjtn002 = new ASTNEQNode(JJTNEQNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ additiveExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/            | < LT >/*@bgen(jjtree) #LTNode( 2) */
         {
           ASTLTNode jjtn003 = new ASTLTNode(JJTLTNODE);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
         }
         try {
/*@egen*/ additiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte003) {
           if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte003 instanceof RuntimeException) {
             throw (RuntimeException)jjte003;
           }
           if (jjte003 instanceof ParseException) {
             throw (ParseException)jjte003;
           }
           throw (Error)jjte003;
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  2);
           }
         }
/*@egen*/           | < GT >/*@bgen(jjtree) #GTNode( 2) */
         {
           ASTGTNode jjtn004 = new ASTGTNode(JJTGTNODE);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
         }
         try {
/*@egen*/ additiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             throw (RuntimeException)jjte004;
           }
           if (jjte004 instanceof ParseException) {
             throw (ParseException)jjte004;
           }
           throw (Error)jjte004;
         } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
           }
         }
/*@egen*/           | < LE >/*@bgen(jjtree) #LENode( 2) */
         {
           ASTLENode jjtn005 = new ASTLENode(JJTLENODE);
           boolean jjtc005 = true;
           jjtree.openNodeScope(jjtn005);
         }
         try {
/*@egen*/ additiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte005) {
           if (jjtc005) {
             jjtree.clearNodeScope(jjtn005);
             jjtc005 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte005 instanceof RuntimeException) {
             throw (RuntimeException)jjte005;
           }
           if (jjte005 instanceof ParseException) {
             throw (ParseException)jjte005;
           }
           throw (Error)jjte005;
         } finally {
           if (jjtc005) {
             jjtree.closeNodeScope(jjtn005,  2);
           }
         }
/*@egen*/           | < GE >/*@bgen(jjtree) #GENode( 2) */
         {
           ASTGENode jjtn006 = new ASTGENode(JJTGENODE);
           boolean jjtc006 = true;
           jjtree.openNodeScope(jjtn006);
         }
         try {
/*@egen*/ additiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte006) {
           if (jjtc006) {
             jjtree.clearNodeScope(jjtn006);
             jjtc006 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte006 instanceof RuntimeException) {
             throw (RuntimeException)jjte006;
           }
           if (jjte006 instanceof ParseException) {
             throw (ParseException)jjte006;
           }
           throw (Error)jjte006;
         } finally {
           if (jjtc006) {
             jjtree.closeNodeScope(jjtn006,  2);
           }
         }
/*@egen*/           )*}protected void additiveExpression()       :{}{  multiplicativeExpression()  (    < PLUS >/*@bgen(jjtree) #AddNode( 2) */
             {
               ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ multiplicativeExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/            | < MINUS >/*@bgen(jjtree) #MinusNode( 2) */
            {
              ASTMinusNode jjtn002 = new ASTMinusNode(JJTMINUSNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ multiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/              )*}protected void multiplicativeExpression()       :{}{  unaryExpression()  (    < MUL >/*@bgen(jjtree) #MulNode( 2) */
            {
              ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ unaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/            | < DIV >/*@bgen(jjtree) #DivNode( 2) */
          {
            ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ unaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/            | < MOD >/*@bgen(jjtree) #ModNode( 2) */
          {
            ASTModNode jjtn003 = new ASTModNode(JJTMODNODE);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ unaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  2);
            }
          }
/*@egen*/            )*}protected void unaryExpression()       :{}{  < NOT >/*@bgen(jjtree) NotNode */
          {
            ASTNotNode jjtn001 = new ASTNotNode(JJTNOTNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ unaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/         | < MINUS >/*@bgen(jjtree) UnaryMinusNode */
            {
              ASTUnaryMinusNode jjtn002 = new ASTUnaryMinusNode(JJTUNARYMINUSNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ unaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
              }
            }
/*@egen*/                | primaryExpression()}protected void primaryExpression()       :{}{  literal()| id()| < LEFT_PAREN > expression() < RIGHT_PAREN >}protected void id()             :{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token _token;}{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/  _token = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setName(_token.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}protected void literal()       :{}{  intLiteral()| booleanLiteral()| stringLiteral()}protected void stringLiteral()                :{/*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token _token;}{/*@bgen(jjtree) StringLiteral */
  try {
/*@egen*/  _token = < STRING_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(_token.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}protected void intLiteral()             :{/*@bgen(jjtree) IntLiteral */
  ASTIntLiteral jjtn000 = new ASTIntLiteral(JJTINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token _token;}{/*@bgen(jjtree) IntLiteral */
  try {
/*@egen*/  _token = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(Integer.parseInt(_token.image));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}protected void booleanLiteral()       :{}{/*@bgen(jjtree) True */
  {
    ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  < TRUE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/      |/*@bgen(jjtree) False */
  {
    ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ < FALSE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/       }protected void statement()       :{}{  < SEMICOLON >| block()| statementExpression()| ifStatement()| whileStatement()| writeStatement()}protected void block()        :{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Block */
  try {
/*@egen*/  < LEFT_BRACER >  (    statement()  )*  < RIGHT_BRACER >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}protected void statementExpression()       :{}{  assignment() < SEMICOLON >}protected void ifStatement()     :{/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) If */
  try {
/*@egen*/  < IF > < LEFT_PAREN > expression() < RIGHT_PAREN > statement()  [    LOOKAHEAD(1)    < ELSE > statement()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}protected void whileStatement()       :{/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) While */
  try {
/*@egen*/  < WHILE > < LEFT_PAREN > expression() < RIGHT_PAREN > statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}protected void writeStatement()       :{/*@bgen(jjtree) Print */
  ASTPrint jjtn000 = new ASTPrint(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Print */
  try {
/*@egen*/  < PRINT >  (    id()  | literal()  )  < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}